-----------------
20151619.c
-----------------

#include "20151619.h"

#include "commands.h"

#include "util.h"

//DIR Executable

int main()
{
	int isPushed = FALSE, opcode;
	int argCount=0, bfrCount=0, comCount=0;
	char command[30],fullCmd[200];
	char bfr[7][30];
	unsigned int arg1,arg2,arg3;
	int nextAdr = 0,cmaFlag=1;

	//Initialization
	lptr history = NULL;
	newsymtable = TRUE;

	optable = (hptr*)malloc(sizeof(hptr)*HASH_SIZE);
	for (int i=0; i<HASH_SIZE; i++)		
		optable[i] = NULL;

	memory=(char*)malloc(sizeof(char*)*MEM_SIZE);
	cmd_reset();	

	for(int i=0; i<7; i++)
		memset(bfr[i],0,sizeof(bfr[i]));

	hashMain("opcode.txt");

	while(TRUE)
	{
		printf("sicsim>");

		//Get Input
		fgets(fullCmd, sizeof fullCmd,stdin);
		//save with the correct format
		argCount = sscanf(fullCmd,"%s%x ,%x ,%x",command, &arg1, &arg2, &arg3);
		//save everything as string for checking
		bfrCount = sscanf(fullCmd,"%s%s%s%s%s%s%s",bfr[0],bfr[1],bfr[2],bfr[3],bfr[4],bfr[5],bfr[6]);
		//For input with input value (space) , value (space) , value
		if(!strcmp(",",bfr[2])){
			for(int i=3; i<7; i++)
				strcpy(bfr[i-1],bfr[i]);
			comCount++;
		}
		if(!strcmp(",",bfr[3])){
			for(int i=4; i<7; i++)
				strcpy(bfr[i-1],bfr[i]);
			comCount++;
		}


		if (compareString(command, "opcode", NULL) && bfrCount == 2) {
			//correct format for OPCODE [instruction] inserted
			opcode = hashSearch_opcode(bfr[1]);
			if (opcode != -1){
				printf("opcode is %X\n\n", opcode);
				linkedlist_push(&history,fullCmd);
			}
			//invalid [instruction]
			else {
				printf("Invalid Mnemonic!\n\n");
			}
			continue;
		}
		
		if (argCount != bfrCount - comCount) {
			//cases such as dump 4, hello
			cmaFlag = FALSE;
			isPushed = TRUE;
		}
		// cases such as dump 1 , 10 ,
		else if (comCount != 0 && argCount - 2 < comCount){
			cmaFlag = FALSE;
			isPushed = TRUE;
		}



		if (compareString(command, "h", "help") && argCount == 1){
			cmd_help();
			isPushed = FALSE;
		}

		else if(compareString(command,"type",NULL) && argCount == 2){
			cmd_type(bfr[1]);
			isPushed = FALSE;
		}

		else if(compareString(command,"symbol",NULL) && argCount == 1){
			if(!newsymtable)
				symtab_printAll();
			else {
				printf("Not assembled yet!\n");
				isPushed = TRUE;
			}
				
		}

		else if(compareString(command,"assemble",NULL) && argCount == 2){
			isPushed = cmd_assemble(bfr[1]);
		}

		else if (compareString(command, "d", "dir") && argCount == 1){
			cmd_dir();
			isPushed = FALSE;
		}

		else if (compareString(command, "q", "quit") && argCount == 1)
			break;

		else if (compareString(command, "hi", "history") && argCount == 1) {
			linkedlist_push(&history, fullCmd);
			linkedlist_print(history);
			isPushed = TRUE;
		}
		//Maximum number of input is 3
		else if (compareString(command, "du", "dump") && argCount <= 3 && cmaFlag) {
			switch (argCount) {
			//when only dump is inserted
			case 1:
				arg1 = INT_MIN;
				arg2 = INT_MIN;
				break;
			//when dump start is inserted
			case 2:
				arg2 = INT_MIN;
				isPushed = checkHex(bfr[1]) && checkComma(bfr[1]);
				isPushed = !isPushed;
				break;
			//when dump start, end is inserted
			case 3:
				isPushed = checkHex(bfr[1]) && checkHex(bfr[2]) && checkComma(bfr[2]);
				isPushed = !isPushed;
				break;
			}
			if (!isPushed)
				isPushed = !(cmd_dump(arg1, arg2, &nextAdr));
			//Comma at the end
			else
				printf("Invalid command!");

		}
		else if (compareString(command, "e", "edit") && argCount == 3 && cmaFlag){
			isPushed = checkComma(bfr[2]) && checkHex(bfr[1]) && checkHex(bfr[2]);
			isPushed = !isPushed;
			if (!isPushed)
				isPushed = !(cmd_edit(arg1, arg2));
			else
				printf("Invalid command!");
		}
		else if (compareString(command, "f", "fill") && argCount == 4 && cmaFlag){
			//check if the command finished with a comma or if input has non-hex
			isPushed = checkComma(bfr[3]) && checkHex(bfr[1]) && checkHex(bfr[2]) && checkHex(bfr[3]);
			isPushed = !isPushed;
			
			if (!isPushed)
				isPushed = !(cmd_fill(arg1,arg2, arg3));
			else
				printf("Invalid command!");
		}
		else if (compareString(command, "reset", NULL) && argCount == 1){
			cmd_reset();
			isPushed = FALSE;
		}

		else if (compareString(command, "opcodelist", NULL) && argCount == 1){
			hashlist_printAll(optable);
			isPushed = FALSE;
		}

		else {
			isPushed = TRUE;
			printf("Invalid Command!\n");
		}
		

		if (isPushed == TRUE)
			isPushed = FALSE;
		else
			linkedlist_push(&history,fullCmd);

		//RESET
		for(int i=0; i<7; i++)
				memset(bfr[i],0,sizeof(bfr[i]));
		argCount = bfrCount = comCount = 0;
		arg1 = arg2 = arg3 = INT_MIN;
		cmaFlag = TRUE;
		printf("\n");
	}
}

-----------------
20151619.h
-----------------

#ifndef _20151619_H_
#define _20151619_H_
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <dirent.h>
#include <sys/stat.h>
#include <limits.h>

#include "commands.h"

#define TRUE 1
#define FALSE 0
#define MEM_SIZE 65536 * 16
#define WORD 3
#define BYTE 1
#define MAX_TEXT_LINE 69

#include "ds.h"

unsigned char *memory;
hashlist **optable;
symptr *symboltable;
int newsymtable;

#endif

-----------------
commands.c
-----------------

#include "commands.h"
#include "util.h"
#include "20151619.h"
#include <math.h>
#include "ds.h"

//Prints Help
void cmd_help() {
	printf("h[elp]\nd[ir]\nq[uit]\nhi[story]\ndu[mp] [start,end]\n");
	printf("e[dit] address, value\nf[ill] start, end, value\nreset\n");
	printf("opcode mnemonic\nopcodelist\nassemble filename\ntype filename\nsymbol\n");
	return;
}

void cmd_type(char* filename){
	FILE *fp = fopen(filename,"r");
	char line[100]={0,};
	if (fp == NULL){
		printf("File doesn't exist!\n");
		return;
	}
	//prints 1 line at a time until FILE ends
	while(fgets(line,100,fp) != NULL)
			printf("%s",line);
	fclose(fp);
	return;
}

int cmd_assemble(char* filename){
	FILE *fp = fopen(filename, "r");
	char line[200]={0,}, line2[200]={0,};
	char label[30], operand[30], operand2[30], operation[30], *tempFormat;
	char* tempContent, *fname, fname1[30], fname2[30];
	int argCount, num, numCount, base, hashindex, totalLength;
	int isFirst = TRUE, errorFlag = FALSE;
	int opcode,format=-1, locctr=0,linecount;
	
	intermptr intermediate=NULL;
	intermptr newinterm;
	symptr* tempsymtab; 

	//PASS 1
	if (fp == NULL){
		printf("File doesn't exist!\n");
		return TRUE;
	}
	
	tempsymtab = (symptr*)calloc(SYM_SIZE,sizeof(symptr)*SYM_SIZE);

	linecount = 0;
	//Get 1 line at a time from file until NULL
	while(fgets(line,200,fp) != NULL && errorFlag == FALSE){
		int i=0;
		//count line for error
		linecount++;
		//empty line
		if(!strcmp(line,"") || !strcmp(line,"\n"))
			continue;
		//ignore comment line
		i=0;
		while(line[i] == ' ' || line[i] =='\t')
			i++;
		//if it's a comment line
		if(line[i] == '.'){
			newinterm = (intermptr)calloc(1,sizeof(interm));
			strcpy(newinterm->line,line);
			newinterm->addr = -1;
			interm_push(&intermediate,newinterm);
			continue;
		}
		//seperates a line by label, directive and operands
		argCount = asmSeparater(line,label,operation,operand,operand2);

		//checks if the first line is START
		if(isFirst){
			//sets initial location counter with the operand
			if(!strcmp(operation,"START"))
				locctr = StrToHex(operand); 
			//if start address wasn't given, set to 0
			else
				locctr = 0;
			isFirst = FALSE;
		}

		//if there is a symbol
		if(strcmp(label,"")){
			//get the index in the symbol table
			int index = symfunction(label);
			//insert into that index of symbol table
			if(symtab_push(&(tempsymtab[index]), label, locctr) == TRUE){
				printf("ERROR at line %d\n",linecount);
				errorFlag = TRUE;
			}
		}
			

		//make new node for a line of intermediate file
		newinterm = (intermptr)calloc(1,sizeof(interm));
		newinterm->addr = locctr;
		newinterm->next = NULL;
		newinterm->argCount = argCount;

		//Handle format 4 exception
		if(operation[0] == '+'){
			format = 4;
			//extract from index 1
			tempFormat = hashSearch_format(&(operation[1]));
			opcode = hashSearch_opcode(&(operation[1]));
			strcpy(newinterm->operation,&(operation[1]));
			if(tempFormat == NULL){
				printf("ERROR at line %d\n",linecount);
				errorFlag = TRUE;
				continue;
			}
		}
		else{
			tempFormat = hashSearch_format(operation);
			opcode = hashSearch_opcode(operation);
			strcpy(newinterm->operation,operation);
		}

		//Set format for 1,2,3
		if(tempFormat != NULL && format != 4){
			if(!strcmp(tempFormat,"3/4"))
				format = 3;
			else
				format = (int)tempFormat[0] - (int)'0';
		}

		//make new node for a line of intermediate file
		newinterm->format = format;
		strcpy(newinterm->operand,operand);
		strcpy(newinterm->operand2,operand2);
		strcpy(newinterm->line,line);
		strcpy(newinterm->label,label);
		interm_push(&intermediate,newinterm);

		//increase LOCCTR
		if(format != -1){
			locctr += format;
		}//if
		//directives without opcode such as RESB, RESW
		else{
			if(!strcmp(operation,"RESW")){
				num = StrToInt(operand);
				locctr += num * 3;
			}
			else if(!strcmp(operation,"RESB")){
				num = StrToInt(operand);
				locctr += num;
			}
			else if(!strcmp(operation, "BYTE")){
				//remove indicator X and C
				tempContent = extractContent(operand);
				//if the input is in Hexadecimal
				if(operand[0] == 'X'){
					num = (int)strlen(tempContent);
					locctr += ceil((float)num/2);
				}
				//if the input is in Character
				else if(operand[0] == 'C'){
					locctr += strlen(tempContent);
				}
				//other than these 2, error
				else{
					printf("ERROR at line %d\n",linecount);
					errorFlag = TRUE;
				}
			}
			else if(!strcmp(operation, "WORD")){
				num = StrToInt(operand);	
				locctr += 3;
			}
			else if(!strcmp(operation,"END")){
				totalLength = locctr;
			}
			else if(compareString(operation,"START","BASE")){
				opcode = 0;
			}
			//unknown directive
			else{
				printf("ERROR at line %d\n",linecount);
				errorFlag = TRUE;
				continue;
			}

		}//else

		//reset
		format = -1;
		memset(operation, 0, sizeof operation);
		memset(label, 0, sizeof label);
		memset(operand, 0, sizeof operand);
		memset(operand2, 0, sizeof operand2);

	}//while
	fclose(fp);

	//stop if there was an error
	if(errorFlag)
		return TRUE;

	//--------------------------------------------
	//PASS 2
	//--------------------------------------------
	if (intermediate == NULL){
		printf("No lines to assemble\n");
		return TRUE;
	}
	else{
		int offset, pc, hashindex, newlineadr;
		int colcount=0,colcount2=0, linenum=0, newlineFlag=FALSE;
		int *modification = (int*)malloc(sizeof(int)*300);
		int modfIdx=0,modfSize=300;
		unsigned int obj12=0,obj3=0,obj4=0;
		char strcontent[30];

		FILE *lstfile, *objfile;
		intermptr curline;
		curline = intermediate;

		//open list file and object file
		fname = strtok(filename,".");
		strcpy(fname1,fname);
		strcpy(fname2,fname);
		strcat(fname1,".lst");
		strcat(fname2,".obj");	
		lstfile = fopen(fname1,"w+");
		objfile = fopen(fname2,"w+");

		
		//reset values;
		colcount = 9;
		colcount2 = 0;
		newlineadr = -1;
		memset(line,0,sizeof(line));

		//if first line isn't Start
		if(strcmp(curline->operation,"START"))
			fprintf(objfile,"H      000000%06X\n",totalLength);

		linecount = 0;
		while(curline != NULL && errorFlag == FALSE){
			char objstr[3][20];
			linecount++;
			//lines that don't produce opcodes
			curline->line[strlen(curline->line)-1] = '\0';
			//print line number
			fprintf(lstfile,"%04d\t",linenum);
			linenum +=5;
			//if current line of intermediate file is a comment line
			if(curline->addr == -1){
				fprintf(lstfile,"\t%s\n",curline->line);
				curline = curline->next;
				continue;
			}

			//print location counter if it's not END
			if(strcmp(curline->operation,"END"))
				fprintf(lstfile,"%04X\t",curline->addr);
			else
				fprintf(lstfile,"    \t");
			//print assembly code
			fprintf(lstfile,"%-30s",curline->line);
			

			//if current line is RESW or RESB, start new line
			if(compareString(curline->operation,"RESW","RESB")){
				fprintf(lstfile,"\n");
				newlineFlag = TRUE;
				curline = curline->next;
				continue;
			}
			//if current line is BASE, move to the next line
			else if(!strcmp(curline->operation,"BASE")){
				fprintf(lstfile,"\n");
				curline = curline->next;
				continue;
			}
			//if current line is START
			else if(!strcmp(curline->operation,"START")){
				fprintf(lstfile,"\n");
				//Start Header record
				fprintf(objfile,"H");
				fprintf(objfile,"%-6s",curline->label);
				fprintf(objfile,"%06X",curline->addr);
				fprintf(objfile,"%06X\n",totalLength-curline->addr);
				//start a new Text Record
				fprintf(objfile,"T%06X",curline->addr);
				curline = curline->next;
				continue;
			}
			else if(!strcmp(curline->operation,"END")){
				fprintf(lstfile,"\n");
				//print last line TEXT LINE of obj file
				if(strcmp(line,""))
					fprintf(objfile,"%02X%s",(int)(strlen(line))/2,line);
				if(strcmp(line2,""))
					fprintf(objfile,"\nT%06X%s",newlineadr,line2);
				//modification record
				for(int k=0;k<modfIdx;k++)
					fprintf(objfile,"\nM%06X05",modification[k]);
				//get the address of the symbol that END points
				hashindex = symfunction(curline->operand);
				offset = symtab_search(tempsymtab[hashindex],curline->operand);
				fprintf(objfile,"\nE%06X\n",offset);
				
				curline = curline->next;
				continue;
			}

			//initialize variables
			obj12 = obj3 = obj4 = 0;
			for(int i=0;i<3;i++)
				memset(objstr[i],0,sizeof(objstr[i]));

			//intialize new line
			if(newlineFlag == TRUE){
				//if there's anything in line
				if(strcmp(line,"")){
					fprintf(objfile,"%02X%s\n",(int)(strlen(line))/2,line);
					memset(line,0,sizeof(line));
				}
				//line2 is empty
				if(!strcmp(line2,"")){
					fprintf(objfile,"T%06X",curline->addr);
				}
				//if line2 isn't empty
				else{
					fprintf(objfile,"T%06X",newlineadr);
					strcpy(line,line2);
					memset(line2,0,sizeof(line2));
				}
				//reset values for new line
				colcount = 9 + colcount2;
				colcount2 = 0;
				newlineadr = -1;
				newlineFlag = FALSE;
			}
			

			//first 2 digits of object code
			obj12 = hashSearch_opcode(curline->operation);

			//format 2
			if(curline->format == 2){
				//if command is SVC
				if(!strcmp(curline->operand,"SVC")){
					int temp = StrToHex(curline->operand);
					obj3 = insertHexAt(obj3,temp,1);
				}
				else{
					int temp = registerNum(curline->operand);
					//if operand isn't a register
					if(temp == -1){
						printf("ERROR at line %d\n",linecount);
						errorFlag = TRUE;
						continue;
					}
					obj3 = insertHexAt(obj3,temp,1);
					//If second operand exists
					if(curline->argCount < 0){
						//if directive is SHIFTL or SHIFTR, 2nd operand is an integer
						if(compareString(curline->operand2,"SHIFTL","SHIFTR")){
							temp = StrToHex(curline->operand2);
							obj3 = insertHexAt(obj3,temp,0);
						}
						else{
							temp = registerNum(curline->operand2);
							//if operand isn't a register
							if(temp == -1){
								printf("ERROR at line %d\n",linecount);
								errorFlag = TRUE;
								continue;
							}
							obj3 = insertHexAt(obj3,temp,0);
						}
						
					}
				}//else
			}
			else if(curline->format >= 3){
				//set e flag for format 4
				if(curline->format == 4)
						obj3++;
				if(abs(curline->argCount) > 1){
					//set flag for addressing mode
					obj12 += addressingMode(curline->operand);
					//Set flag for indexed addressing
					if(!strcmp(curline->operand2,"X"))
						obj3 += 8;
					
					//remove first character
					if(curline->operand[0] == '#' || curline->operand[0] == '@')
						strcpy(strcontent,curline->operand +1);
					else
						strcpy(strcontent,curline->operand);

					//Check if operation is LDB and set base variable
					hashindex = symfunction(strcontent);
					offset = symtab_search(tempsymtab[hashindex],strcontent);
					if(!strcmp(curline->operation,"LDB"))
						base = offset;
					//operand doesn't exist in the symbol table
					if(offset == -1){
						int temp = StrToInt(strcontent);
						if (temp != -1)
							obj4 += temp;
						else{
							printf("ERROR at line %d\n",linecount);
							errorFlag = TRUE;
							continue;
						}
					}
					else{
						//if format4, direct addressing
						if(curline->format == 4){
							//if it is not immediate addressing
							if(curline->operand[0] != '#'){
								//add to modification record
								modification[modfIdx++] = curline->addr + 1;
								if(modfIdx == modfSize - 1){
									modfSize *= 2;
									modification = (int*)realloc(modification,sizeof(int)*modfSize);
								}
							}
							
							obj4 = offset;
						}
						else{
							//check for PC relative
							pc = curline->next->addr;
							if(offset - pc >= -2048 && offset - pc <= 2047){
								//use pc relative
								obj4 = offset - pc;
								obj3 += 2;
							}
							else{
								//use base relative
								obj4 = offset - base;
								obj3 += 4;
							}
						}
					}
				}//if argCount > 1
				else{
					obj12 += 3;
				}	
			}
			//When BYTE directive is inserted
			else if(!strcmp(curline->operation, "BYTE")){
				//Extract content, removing C and X
				char *tempContent = extractContent(curline->operand);
				if(curline->operand[0] == 'X'){
					//write content to file
					fprintf(lstfile,"%s\n",tempContent);
					//if this line can fit into the current line of object file
					if(colcount + strlen(tempContent) <= MAX_TEXT_LINE){
						colcount += strlen(tempContent);
						strcat(line,tempContent);
					}
					//if this line needs to be on the next line of object file
					else{
						newlineFlag = TRUE;
						colcount2 = strlen(tempContent);
						newlineadr = curline->addr;
						strcat(line2,tempContent);
					}
				}
				//Character inserted
				else if(curline->operand[0] == 'C'){
					char convstr[10];
					char tempstr[10];
					//convert each character to corresponding ASCII in hex and write to file
					for(int i=0; i<strlen(tempContent); i++){
						fprintf(lstfile,"%2X",(int)(tempContent[i]));
						sprintf(convstr,"%2X",(int)(tempContent[i]));
						strcat(tempstr,convstr);
					}
					fprintf(lstfile,"\n");
					//if this line can fit into the current line of object file
					if(colcount + strlen(tempstr) <= MAX_TEXT_LINE){
						colcount += strlen(tempstr);
						strcat(line,tempstr);
					}
					//if this line needs to be on the next line of object file
					else{
						newlineFlag = TRUE;
						colcount2 = strlen(tempstr);
						newlineadr = curline->addr;
						strcat(line2,tempstr);
					}
				}
				else
					fprintf(lstfile,"%s\n",curline->operand);
				curline = curline->next;
				continue;
			}//format3,4 if
			else if(!strcmp(curline->operation, "WORD")){
				char tempstr[10];
				int temp = StrToInt(curline->operand);
				sprintf(tempstr,"%06X",temp);
				fprintf(lstfile,"%06X\n",temp);
				//if this line can fit into the current line of object file
				if(colcount + strlen(tempstr) <= MAX_TEXT_LINE){
					colcount += strlen(tempstr);
					strcat(line,tempstr);
				}
				//if this line needs to be on the next line of object file
				else{
					newlineFlag = TRUE;
					colcount2 = strlen(tempstr);
					newlineadr = curline->addr;
					strcat(line2,tempstr);
				}
				curline = curline->next;
				continue;
			}
			//make first 2 Hexadecimal
			sprintf(objstr[0],"%02X",obj12);
			//make the rest of object codes
			switch(curline->format){
				//format 1
				case 1:
					fprintf(lstfile,"%02X\n",obj12);
					break;
				//format 2
				case 2:
					fprintf(lstfile,"%02X%02X\n",obj12,obj3);
					sprintf(objstr[1],"%02X",obj3);
					break;
				//format 3
				case 3:
					fprintf(lstfile,"%02X%01X%03X\n",obj12,obj3,obj4%(1<<12));
					sprintf(objstr[1],"%01X",obj3);
					sprintf(objstr[2],"%03X",obj4%(1<<12));
					break;
				//format 4
				case 4:
					fprintf(lstfile,"%02X%01X%05X\n",obj12,obj3,obj4%(1<<20));
					sprintf(objstr[1],"%01X",obj3);
					sprintf(objstr[2],"%05X",obj4%(1<<20));
					break;
			}
			//if this line can fit into the current line of object file
			if(colcount + curline->format*2 <= MAX_TEXT_LINE){
				colcount += curline->format*2;
				for(int k=0;k<curline->format && k<3;k++)
					strcat(line,objstr[k]);
			}
			//if this line needs to be on the next line of object file
			else{
				newlineFlag = TRUE;
				colcount2 = curline->format*2;
				newlineadr = curline->addr;
				for(int k=0;k<curline->format && k<4;k++)
					strcat(line2,objstr[k]);
			}

			curline = curline->next;
		}//while
		fclose(lstfile);
		fclose(objfile);
	}//else

	if(errorFlag){
		remove(fname1);
		remove(fname2);
		return TRUE;
	}
	//if symbol table is alreay set, clear
	if(!newsymtable){
		for(int i = SYM_SIZE; i>=0; i--)
			free(symboltable[i]);
		free(symboltable);
		symboltable = NULL;
	}

	printf("\noutput file: [%s], [%s]\n",fname1,fname2);

	//successfully assembled. Set global symbol table to current file's symbol table
	symboltable = tempsymtab;
	newsymtable = FALSE;

	return FALSE;
}

//Prints files in current directory
void cmd_dir() {
	DIR *dir;
	struct dirent *file;
	struct stat info;

	if ((dir = opendir("./")) != NULL) {
		/* print all the files and directories within directory */
		while ((file = readdir(dir)) != NULL) {
			stat(file->d_name, &info);
			//If file is a directory
			if(S_ISDIR(info.st_mode))
					printf("%s/\n",file->d_name);
			//If file is executable
			else if(info.st_mode & S_IXUSR)
					printf("%s*\n", file->d_name);
			//other files
			else
					printf("%s\n",file->d_name);
		}
		closedir(dir);
	}
	else {
		/* could not open directory */
		perror("");
		printf("Error opening directory");
	}
	return;
}

//Prints memory
int cmd_dump(int start, int end, int* nextAdr) {
	int row, col, over = FALSE;
	int rowStart, rowEnd, curAdr;

	//if ending addr is not inserted
	if (end == INT_MIN) {
		//if starting addr is not inserted
		if (start == INT_MIN)
			start = *nextAdr;
		end = start + 159;
	}
	else{
		//if inserted range end is out of bound
		if (checkRange(end) == FALSE || checkRange(start) == FALSE){
			printf("Invalid Range\n");
			return FALSE;
		}
		
	}
	
	//if start addr is bigger than end addr
	if (end < start) {
		printf("Invalid Range\n");
		return FALSE;
	}

	// if start is out of memory range
	if (!checkRange(start)) {
		printf("Invalid Range\n");
		return FALSE;
	}

	rowStart = start / 16;
	rowEnd = end / 16;

	for (row = rowStart; row <= rowEnd; row++) {
		// if row is out of range
		if (row * 16 > 0xFFFFF) {
			over = TRUE;
			break;
		}
		printf("%05X  ", row * 16);

		//Content
		for (col = 0; col < 16; col++) {
			curAdr = row * 16 + col;
			if (curAdr > 0xFFFFF) {
				over = TRUE;
				break;
			}
			//Range before start
			if (curAdr < start)
				printf("   ");
			//Range after end
			else if (curAdr > end)
				printf("   ");
			else
				printf("%02X ", memory[curAdr]);
		}
		printf("; ");

		//Value
		for (col = 0; col < 16; col++)
		{
			curAdr = row * 16 + col;
			if (curAdr > 0xFFFFF) {
				over = TRUE;
				break;
			}
			//Range before start
			if (curAdr < start)
				printf(". ");
			//Range after end
			else if (curAdr > end)
				printf(". ");
			else {
				if ((int)memory[curAdr] >= 0x20 && (int)memory[curAdr] <= 0x7E)
					printf("%c ", memory[curAdr]);
				else 
					printf(". ");
			}
		}
		printf("\n");
	}
	if (over)
		*nextAdr = 0;
	else
		*nextAdr = end + 1;

	return TRUE;
}

//change a memory's content
int cmd_edit(int adr, int value) {
	if (!checkRange(adr)) {
		printf("Wrong Address!\n");
		return FALSE;
	}
	memory[adr] = value;

	return TRUE;
}

//changes memory to value from start adr to end adr
int cmd_fill(int start, int end, int value) {
	int rowStart, rowEnd, row, col, curAdr;

	if (end < start) {
		printf("Invalid Range!\n");
		return FALSE;
	}

	if (!(checkRange(start) && checkRange(end))) {
		printf("Invalid Range!\n");
		return FALSE;
	}
	rowStart = start / 16;
	rowEnd = end / 16;

	for (row = rowStart; row <= rowEnd; row++) {
		for (col = 0; col < 16; col++) {
			curAdr = row * 16 + col;
			//change curAdr memory to value if curAdr is not out of bound
			if (curAdr >= start && curAdr <= end)
				memory[curAdr] = value;
		}
	}

	return TRUE;
}

//resets entire memory
void cmd_reset() {
	memset(memory, 0, sizeof(char)*MEM_SIZE);
}

int hashSearch_opcode(char* mnem) {
	//Convert lowercase to uppercase
	LowerToUpper(mnem);
	int index = hashfunction(mnem);
	hptr temp = optable[index];
	//search untill the end of one optable's index
	while (temp != NULL) {
		//if the mnemonic that i'm looking for is found
		if (!strcmp(mnem, temp->mnem))
			return temp->opcode;
		//otherwise continue to the next node
		temp = temp->next;
	}
	return -1;
}

char* hashSearch_format(char* mnem) {
	//Convert lowercase to uppercase
	LowerToUpper(mnem);
	int index = hashfunction(mnem);
	hptr temp = optable[index];
	//search untill the end of one optable's index
	while (temp != NULL) {
		//if the mnemonic that i'm looking for is found
		if (!strcmp(mnem, temp->mnem))
			return temp->format;
		//otherwise continue to the next node
		temp = temp->next;
	}
	return NULL;
}

int addressingMode(char* str){
	if(str[0] == '#')
		return 1;
	else if(str[0] == '@')
		return 2;
	else
		return 3;
}

-----------------
commands.h
-----------------

#ifndef _COMMANDS_H_
#define _COMMANDS_H_

#define CHAR 0
#define HEX 1
#define DEC 2

void cmd_dir();
void cmd_help();
void cmd_type(char*);
int cmd_assemble(char*);
void cmd_reset();
int cmd_dump(int, int, int*);
int cmd_edit(int, int);
int cmd_fill(int, int, int);
int hashSearch_opcode(char*);
char* hashSearch_format(char*);
int addressingMode(char*);


#endif

-----------------
ds.c
-----------------

#include "ds.h"
#include "20151619.h"

#include <string.h>
#include <stdlib.h>

//appends new node with command to the end of head linked list
void linkedlist_push(lptr* head,char* command){
	lptr temp = *head;
	lptr newNode = (lptr)malloc(sizeof(linkedlist));
	
	newNode->next = NULL;
	strcpy(newNode->command,command);

	if(temp != NULL){
		//goes to the last node
		while(temp->next != NULL)
			temp = temp->next;	
		temp->next = newNode;
	}
	else{
		*head = newNode;
	}

	return;
}

//prints all the nodes in the linked list my moving one node at a time
void linkedlist_print(lptr head){
	int count = 1;
	lptr temp = head;

	while(temp != NULL){
		printf("%-4d   %s",count++,temp->command);
		temp = temp->next;
	}

	return;
}

//main function to create initial hashtable
void hashMain(char* fname){
	FILE *fp = fopen(fname, "r");
	int opcode,index;
	char mnem[30], format[30];

	if (fp != NULL){
		while(fscanf(fp,"%X %s %s",&opcode,mnem,format) != EOF){
			//finds the index for mnemonic to go in the hashtable
			index = hashfunction(mnem);
			//appends that mnemonic to the table
			hashlist_push(&(optable[index]),mnem,opcode,format);
		}
	}
	else{
		printf("Cannot open File\n!");
	}
}

//returns index number for the mnemonic to go into in the hashtable
int hashfunction(char* str){
	int i,sum=0;
	for(i=0; i<(int)strlen(str); i++)
		sum += (int)str[i];
	return sum % HASH_SIZE;
}

//creates a new node with mnemonic, opcode and format. Then inserts the new node the end of head list
void hashlist_push(hptr *head,char* mnem,int opcode, char* format){
	hptr temp = *head;

	//make new node
	hptr newNode = (hptr)malloc(sizeof(hashlist));
	newNode->next = NULL;
	strcpy(newNode->mnem,mnem);
	strcpy(newNode->format,format);
	newNode->opcode = opcode;


	if(*head != NULL){
		//go to the end of head
		while(temp->next != NULL)
			temp = temp->next;	
		//insert to new node
		temp->next = newNode;
	}else{
		*head = newNode;
	}

	return;
}

//prints whole hashtable
void hashlist_printAll(hptr *head){
	int i, isFirst;
	hptr temp;

	for(i=0; i<HASH_SIZE; i++){
		temp = head[i];
		isFirst = TRUE;
		//if an index is not empty
		if(temp != NULL){
			printf("%d : ",i);
			//iterate through the list
			while(temp != NULL){
				if(!isFirst)
					printf(" -> ");
				printf("[%s, %X]",temp->mnem,temp->opcode);
				temp = temp->next;
				isFirst = FALSE;
			}
			printf("\n");
		}

	}
}

int symtab_push(symtab **head,char* label,int addr){
	symtab *temp;
	symtab *prev;

	//make new node
	symtab* newNode = (symtab*)malloc(sizeof(symtab));
	strcpy(newNode->label,label);
	newNode->addr = addr;
	newNode->next = NULL;


	if(*head != NULL){
		//head에 삽입하는 경우
		if (strcmp((*head)->label, label) < 0){
			newNode->next = *head;
			*head = newNode;
			return FALSE;
		}
		else{
			temp = (*head)->next;
			prev = *head;
		}
		//Search for the right place to go
		while(temp != NULL){
			//duplicate symbol
			if(!strcmp(temp->label,label))
				return TRUE;
			if(strcmp(temp->label,label) < 0){
				prev->next = newNode;
				newNode ->next = temp;
				return FALSE;
			}
			prev = temp;
			temp = temp->next;
		}
		//insert to new node
		prev->next = newNode;
	}else{
		*head = newNode;
	}

	return FALSE;
}

int symtab_search(symtab* head,char* label){
	while(head != NULL){
		if(!strcmp(head->label,label))
			return head->addr;
		head = head->next;
	}
	return -1;
}

void symtab_printAll(){
	for(int i=SYM_SIZE-1;i>=0;i--)
		symtab_print(symboltable[i]);
}

void symtab_print(symtab *head){
    while(head != NULL){
        printf("\t%s %X\n",head->label,head->addr);
        head = head->next;
    }
}

int symfunction(char* str){
	return (int)str[0] - (int)'A';
}

void interm_push(intermptr *head,intermptr newNode){
	intermptr temp = *head;

	if(*head != NULL){
		//go to the end of head
		while(temp->next != NULL)
			temp = temp->next;	
		//insert to new node
		temp->next = newNode;
	}else{
		*head = newNode;
	}

	return;
}

-----------------
ds.h
-----------------

#ifndef _DS_C_
#define _DS_C_

#define HASH_SIZE 20
#define SYM_SIZE 26

typedef struct interm* intermptr;
typedef struct interm {
    int addr;
	int format;
	int argCount;
    char operation[30];
    char operand[20];
    char operand2[20];
	char label[30];
	char line[200];
    intermptr next;
}interm;

typedef struct linkedlist* lptr;
typedef struct linkedlist {
	char command[100];
	lptr next;
}linkedlist;
void linkedlist_push(lptr*, char*);
void linkedlist_print(lptr);

typedef struct symtable* sptr;
typedef struct symtable {
	char label[30];
	unsigned int addr;
	sptr next;
}symtable;

typedef struct hashlist* hptr;
typedef struct hashlist {
	char mnem[20];
	int opcode;
	char format[20];
	hptr next;
}hashlist;
void hashMain(char*);
int hashfunction(char*);
void hashlist_push(hptr*, char*, int, char*);
void hashlist_printAll(hptr*);

typedef struct symtab* symptr;
typedef struct symtab {
	char label[30];
	int addr;
	symptr next;
}symtab;
int symfunction(char*);
int symtab_push(symtab**,char*,int);
void symtab_print(symptr);
void symtab_printAll();
int symtab_search(symtab*,char*);

void interm_push(intermptr*, intermptr);

#endif

-----------------
util.c
-----------------

#include "util.h"
#include "20151619.h"

#include "math.h"

//compares command with shortcommand and longcommand and see if command matches with one of them
int compareString(char* command, char* shortcommand, char* longcommand) {
	if (!strcmp(command, shortcommand) || (longcommand != NULL && !strcmp(command, longcommand)))
		return TRUE;
	else
		return FALSE;
}

//check if adr is within the valid range
int checkRange(int adr) {
	if (adr < 0 || adr >= 0x100000)
		return FALSE;
	return TRUE;
}

//check if str has any non-hex char
int checkHex(char* str){
	for(int i=0; i<(int)strlen(str); i++){
		if((str[i] >=48 && str[i] <=57) || (str[i] >= 65 && str[i] <=70) || (str[i] >= 97 && str[i] <= 102) || str[i] == ',') 	
			continue ;
		else if(str[i] == 'X' || str[i] == 'x'){
				if(i != 0)
						if(str[i-1] == '0')
								continue;
		}
		else{
				return FALSE;
		}
	}
	return TRUE;
}

//if argCount < 0 , you need to check operand2
int asmSeparater(char* str, char* label, char* operation, char* operand, char* operand2){
	int argCount = sscanf(str,"%s %s %s %s",label,operation,operand,operand2);
	//cases with , such as LDCH BUFFER, X
	if(!checkComma(operation)){
		argCount *= -1;
		//if not all 4 inputs come in, move back
		if(argCount != -4){	
			operation[(int)strlen(operation)-1] = '\0';
			strcpy(operand2,operand);
			strcpy(operand,operation);
			strcpy(operation,label);
			memset(label,0,sizeof label);
		}
	}
	else if(!checkComma(operand)){
		argCount *= -1;
		operand[(int)strlen(operand)-1] = '\0';
	}

	//printf("[%d] ",argCount);
	switch(argCount){
		case 1:
				strcpy(operation,label);
				memset(label,0,sizeof label);
				break;
		case 2:
				strcpy(operand,operation);
				strcpy(operation,label);
				memset(label,0,sizeof label);
				break;
	}

	return argCount;
}

//changes word to uppercase
void LowerToUpper(char* word) {
	for (int i = 0; i < (int)strlen(word); i++)
		if ((int)word[i] > 96 && (int)word[i] < 123)
			word[i] -= 32;
}

//check if command finishes with a comma
int checkComma(char* command){
	int len = (int)strlen(command);
	if(command[len-1] == ',')
		return FALSE;
	return TRUE;
}

int StrToHex(char* str){
	unsigned int num;
	int cnt = sscanf(str,"%x",&num);
	if(cnt == 0)
		return -1;
		
	return num;
}

int StrToInt(char* str){
	unsigned int num;
	int cnt = sscanf(str,"%d",&num);
	if(cnt == 0)
		return -1;
		
	return num;
}

char* extractContent(char* str){
	char *temp = (char*)malloc(30);
	strncpy(temp,&(str[2]),strlen(str)-3);
	temp[strlen(str)-3] = 0;
	return temp;
}

int isDec(char* str){
	int len = (int)strlen(str);
	for(int i=0;i<len;i++)
		if(!inRange((int)'0',(int)'9',str[i]))
			return FALSE;
	return TRUE;
}

int isHex(char* str){
	int len = (int)strlen(str);
	if(isDec(str) == TRUE)
		return TRUE;

	for(int i=0;i<len;i++)
		if(!inRange((int)'a',(int)'f',str[i]) || !inRange((int)'A',(int)'F',str[i]))
			return FALSE;
	return TRUE;
}

int inRange(int min,int max,int value){
	if(value >= min && value <=max)
		return TRUE;
	return FALSE;
}

int HexBitCount(int num){
	int digit = 0;
	while(num >=16){
		num /= 16;
		digit++;
	}
	return digit;
}

int HexByteCount(int num){
	return (int)(ceil((float)num/2));
}

int insertHexAt(int orig, int value, int index){
	for(int i=0;i<index;i++)
		value *= 16;
	return orig + value;
}

int registerNum(char* reg){
	if(!strcmp(reg,"A"))
		return 0;
	else if(!strcmp(reg,"X"))
		return 1;
	else if(!strcmp(reg,"L"))
		return 2;
	else if(!strcmp(reg,"PC"))
		return 8;
	else if(!strcmp(reg,"SW"))
		return 9;
	else if(!strcmp(reg,"B"))
		return 3;
	else if(!strcmp(reg,"S"))
		return 4;
	else if(!strcmp(reg,"T"))
		return 5;
	else if(!strcmp(reg,"F"))
		return 6;
	else
		return -1;
}
-----------------
util.h
-----------------

#ifndef _UTIL_H_
#define _UTIL_H_

int checkRange(int);
int compareString(char*, char*, char*);
int checkComma(char*);
int checkHex(char*);
int asmSeparater(char*, char*, char*, char*, char*);
void LowerToUpper(char*);
int StrToInt(char*);
int StrToHex(char*);
char* extractContent(char*);
int isDec(char*);
int isHex(char*);
int inRange(int,int,int);
int HexBitCount(int);
int insertHexAt(int,int,int);
int registerNum(char*);

#endif